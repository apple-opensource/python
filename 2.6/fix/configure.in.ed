g/-Wl,-search_paths_first/d
g/ -lSystemStubs -arch_only [^"]*/s///
/^AC_DEFINE(_BSD_TYPES/a

# The later defininition of _XOPEN_SOURCE and _POSIX_C_SOURCE disables
# certain features on Mac OS X, so we need _DARWIN_C_SOURCE to re-enable
# them.
AC_DEFINE(_DARWIN_C_SOURCE, 1, [Define on Darwin to activate all library features])
.
/Some systems cannot stand _XOPEN_SOURCE/a
.
/Darwin\/@<:@6789@:>@/s/9//
g/-current_version $(VERSION)/s//-current_version $(PYTHON_CURRENT_VERSION)/
/# -Wno-long-double, -no-cpp-precomp, and -mno-fused-madd/i
	    function vers2str() {
		printf '%02d%02d' `echo $1 | sed 's/\./ /'`
	    }
	    function cmpvers() {
		test `vers2str $1` "$2" `vers2str $3`
	    }
.
/if test ${cur_target} '>' 10\.2/s/test/cmpvers/
/^AC_SUBST(OTHER_LIBTOOL_OPT)/i
AC_SUBST(LIBTOOL)
.
/LIBTOOL_CRUFT=""/i
            LIBTOOL='$(CC) -dynamiclib -all_load $(CFLAGS)'
.
/# LDSHARED is the ld \*command\* used to create shared library/a
.
/if test ${MACOSX_DEPLOYMENT_TARGET} '>' 10\.2/s/test/cmpvers/
g/-O3/s//-Os/g
/^# check for endianness/i

# Check if dtrace should be enabled

AC_MSG_CHECKING([if dtrace should be enabled])

AC_CHECK_HEADER([sys/sdt.h], [HAVE_SDT_H="yes"])

AC_ARG_ENABLE(dtrace,
       [  --enable-dtrace         enable DTrace support.],
       [enable_dtrace=$enableval])
	if test "$enable_dtrace" == "yes" -a "$HAVE_SDT_H" == "yes"; then
		EXTRA_CFLAGS="$EXTRA_CFLAGS -DENABLE_DTRACE"
		if test -x "/usr/bin/isainfo"; then
			arch=`/usr/bin/isainfo -n | cut -b1-5`
			if test "$arch" == "sparc"; then
				EXTRA_CFLAGS="-DENABLE_DTRACE -xarch=v7"
			fi
		fi
	else
		AC_MSG_ERROR([sys/sdt.h was not found])
	fi
AC_SUBST(EXTRA_CFLAGS)
.
w
